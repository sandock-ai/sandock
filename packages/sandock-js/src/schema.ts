/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/meta": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Service meta information */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: components["schemas"]["MetaResponse"];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/user/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User basic profile */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: components["schemas"]["User"];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          spaceId: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Managed sandboxes */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: components["schemas"]["SandboxListResponse"];
            };
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["CreateSandboxRequest"];
        };
      };
      responses: {
        /** @description Created sandbox */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: {
                id: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox/{id}/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Started (or reused) sandbox */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: {
                id: string;
                started: boolean;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox/{id}/code": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RunCodeRequest"];
        };
      };
      responses: {
        /** @description Code execution result */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: components["schemas"]["SandboxExecutionResult"];
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox/{id}/shell": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ShellRequest"];
        };
      };
      responses: {
        /** @description Shell command result */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: components["schemas"]["SandboxExecutionResult"];
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox/{id}/fs/write": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WriteFileRequest"];
        };
      };
      responses: {
        /** @description File written */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: boolean;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox/{id}/fs/read": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          path: string;
        };
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description File content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: {
                path: string;
                content: string;
              };
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox/{id}/fs/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          path?: string;
        };
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Directory entries */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: {
                /** @default . */
                path: string;
                entries: string[];
              };
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox/{id}/fs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: {
      parameters: {
        query: {
          path: string;
        };
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Removed file or directory */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: boolean;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/sandbox/{id}/stop": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Stopped sandbox */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Request success flag
               * @example true
               */
              success: boolean;
              /**
               * @description status code
               * @example 200
               */
              code: number;
              /**
               * @description Response message
               * @example SUCCESS
               */
              message: string;
              data: {
                id: string;
                stopped: boolean;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    MetaResponse: {
      /** @example dev */
      version: string;
      /** @example 1760448876110 */
      timestamp: number;
    };
    User: {
      id: string;
      /** @example Ultra-man */
      name: string;
      /** @example 20 */
      age: number;
    };
    CreateSandboxRequest: {
      spaceId?: string;
      actorUserId?: string;
      /** @example sandockai/sandock-code:latest */
      image?: string;
      /** @example python:3.12-slim */
      pythonImage?: string;
      pull?: boolean;
      memoryLimitMb?: number;
      cpuShares?: number;
      workdir?: string;
      keep?: boolean;
    };
    SandboxExecutionResult: {
      stdout: string;
      stderr: string;
      exitCode: number | null;
      timedOut: boolean;
      durationMs: number;
    };
    RunCodeRequest: {
      /** @enum {string} */
      language: "javascript" | "typescript" | "python";
      code: string;
      timeoutMs?: number;
      input?: string;
    };
    ShellRequest: {
      cmd: string | string[];
      timeoutMs?: number;
      workdir?: string;
      env?: {
        [key: string]: string;
      };
      input?: string;
    };
    WriteFileRequest: {
      /** @example src/index.js */
      path: string;
      content: string;
      executable?: boolean;
    };
    SandboxListResponse: {
      items: {
        id: string;
      }[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
